.TH "VerticalRoutingTracks" 3 "Thu Mar 19 2020" "Version 1.0" "Oroshi - Analog Devices Layout" \" -*- nroff -*-
.ad l
.nh
.SH NAME
VerticalRoutingTracks \- 
.PP
Route two matched capacitors, C1 and C2, drawn in a capacitor matrix\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits CapacitorUnit, and CapacitorStack\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "def \fB__setStretching__\fP"
.br
.RI "\fISets vertical stretching value considering spacing between elementary capacitors in the matrix\&. \fP"
.ti -1c
.RI "def \fBsetRules\fP"
.br
.RI "\fIDefines technology rules used to draw the layout\&. \fP"
.ti -1c
.RI "def \fBdrawVRoutingTracks\fP"
.br
.RI "\fIIteratively draws vertical routing tracks given the physical layer \fCvRoutingTracksLayer\fP\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Route two matched capacitors, C1 and C2, drawn in a capacitor matrix\&. 

Connections are put in place with reference to a given matching scheme\&. Elementary capacitor units are connected to horizontal and vertical routing tracks that represent top plates and bottom plates nets of C1 and C2\&. Supported types of capacitors are Poly-Poly and Metal-Metal\&. Technologycal rules are provided by 350 nm AMS CMOS technology with three-four metal layers\&. Metal layers that are used for routeing are placed similarly to horziontal-vertical (HV) symbolic Alliance CAD tool router, where horizontal metal channels are drawn in metal 2 and the vertical ones are in metal 3\&. Given a matrix of dimensions $ R*C $, the total number of vertical tracks is $ 2C+2 $ equivalent to $ C+1 $ couples, ensuring that every elementary capacitor is positioned between four vertical tracks, two from each side\&. In fact, every adjacent couple of these tracks represent top plates and bottom plates of C1 or C2 as shown in Figure 1\&.
.PP
Layout
.PP
An elementary capacitor unit can be a part of C1 or C2 according to the matching scheme\&. However, to respect common-centroid layout specifications, for C1 and C2 to be equal, the matrix number of colums and number of rows must be both even\&. Addionnally, the number of elementary capacitors dedicated to C1 must be equal to those dedicated to C2\&. These two conditions are tested in one of the class methods\&. An exception is raised if at least one of the two is not respected\&. 
.SH "Member Function Documentation"
.PP 
.SS "def __setStretching__ (self)"

.PP
Sets vertical stretching value considering spacing between elementary capacitors in the matrix\&. 
.PP
\fBReturns:\fP
.RS 4
stratching value\&. 
.RE
.PP

.PP
References VerticalRoutingTracks\&.abutmentBox_spacing, CapacitorStack\&.abutmentBox_spacing, and RoutMatchedCapacitor\&.abutmentBox_spacing\&.
.PP
Referenced by RoutMatchedCapacitor\&.computeHRLayerYCenter(), and VerticalRoutingTracks\&.drawVRoutingTracks()\&.
.SS "def setRules (self)"

.PP
Defines technology rules used to draw the layout\&. Some of the rules, namely those describing routeing layers and tracks are applicable for both MIM and PIP capacitors\&. However, cuts rules are different\&. 
.PP
\fBRemark:\fP
.RS 4
All \fCCapacitorStack\fP class rules are also reloaded in this class\&. An exception is raised if the entered capacitor type is unsupported\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
a dictionary with rules labels as keys and rules content as values\&. 
.RE
.PP

.PP
References VerticalRoutingTracks\&.capacitorsNumber, CapacitorStack\&.capacitorsNumber, VerticalRoutingTracks\&.computeVRTDimensions(), VerticalRoutingTracks\&.drawVRoutingTracks(), VerticalRoutingTracks\&.minEnclosure_hRoutingLayer_vRoutingTrack_cut, VerticalRoutingTracks\&.minEnclosure_hRoutingTrackCut, VerticalRoutingTracks\&.minimizeVRTs(), VerticalRoutingTracks\&.minSpacing_hRoutingTrack, RoutMatchedCapacitor\&.minSpacing_hRoutingTrack, VerticalRoutingTracks\&.minWidth_hRoutingLayer, VerticalRoutingTracks\&.minWidth_hRoutingLayer_vRoutingTrack_cut, VerticalRoutingTracks\&.minWidth_hRoutingTrack, VerticalRoutingTracks\&.minWidth_hRoutingTrackCut, VerticalRoutingTracks\&.setRules(), CapacitorStack\&.setRules(), CapacitorUnit\&.setRules(), and RoutMatchedCapacitor\&.setRules()\&.
.PP
Referenced by VerticalRoutingTracks\&.setRules()\&.
.SS "def drawVRoutingTracks (self, vRoutingTracksLayer)"

.PP
Iteratively draws vertical routing tracks given the physical layer \fCvRoutingTracksLayer\fP\&. Every elementary capacitor is consequently positioned between four routing tracks, two from each side\&. Each couple of adjacent routeing tracks represent top plate and bottom plate nets of Ci, where i is in [1,2]\&. As given in Figure 2, capacitor $ C_{ij} $ with an even j value situated in even columns have and inversely for odd columns numbers\&. 
.PP
References VerticalRoutingTracks\&.__computeVRTsNumber__(), VerticalRoutingTracks\&.__findCapIdsToEliminate__(), VerticalRoutingTracks\&.__findCapIdsToEliminatePerColumn__(), VerticalRoutingTracks\&.__findUsedCapIdsPerColumn__(), VerticalRoutingTracks\&.__findVRTsToEliminate__(), VerticalRoutingTracks\&.__setNetsDistribution__(), VerticalRoutingTracks\&.__setPlatesDistribution__(), VerticalRoutingTracks\&.__setStretching__(), VerticalRoutingTracks\&.__setVRTsDistribution__(), VerticalRoutingTracks\&.abutmentBox_spacing, CapacitorStack\&.abutmentBox_spacing, RoutMatchedCapacitor\&.abutmentBox_spacing, VerticalRoutingTracks\&.capacitorIds, VerticalRoutingTracks\&.capacitorsNumber, CapacitorStack\&.capacitorsNumber, VerticalRoutingTracks\&.computeXCenters(), VerticalRoutingTracks\&.dummyElement, CapacitorStack\&.dummyElement, RoutMatchedCapacitor\&.dummyElement, VerticalRoutingTracks\&.dummyRing, CapacitorStack\&.dummyRing, RoutMatchedCapacitor\&.dummyRing, VerticalRoutingTracks\&.getVTrackYMax(), VerticalRoutingTracks\&.getVTrackYMin(), CapacitorUnit\&.hpitch, RoutMatchedCapacitor\&.hRoutingTrack_width, VerticalRoutingTracks\&.hRoutingTrack_width, VerticalRoutingTracks\&.matchingScheme, CapacitorStack\&.matchingScheme, CapacitorStack\&.matrixDim, VerticalRoutingTracks\&.matrixDim, RoutMatchedCapacitor\&.maximumPosition, VerticalRoutingTracks\&.maximumPosition, CapacitorUnit\&.metal2Width, VerticalRoutingTracks\&.minEnclosure_hRoutingTrackCut, VerticalRoutingTracks\&.minimizeVRT, RoutMatchedCapacitor\&.minimumPosition, VerticalRoutingTracks\&.minimumPosition, VerticalRoutingTracks\&.minWidth_hRoutingTrack, VerticalRoutingTracks\&.minWidth_hRoutingTrackCut, VerticalRoutingTracks\&.nets, CapacitorStack\&.nets, VerticalRoutingTracks\&.platesDistribution, VerticalRoutingTracks\&.vRoutingTrack_width, CapacitorStack\&.vRoutingTrack_width, VerticalRoutingTracks\&.vRoutingTrackDict, RoutMatchedCapacitor\&.vRoutingTrackDict, VerticalRoutingTracks\&.vRoutingTrackXCenter, RoutMatchedCapacitor\&.vRoutingTrackXCenter, VerticalRoutingTracks\&.vRTsDistribution, RoutMatchedCapacitor\&.vRTsDistribution, and VerticalRoutingTracks\&.vRTsToEliminate\&.
.PP
Referenced by VerticalRoutingTracks\&.setRules()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Oroshi - Analog Devices Layout from the source code\&.
