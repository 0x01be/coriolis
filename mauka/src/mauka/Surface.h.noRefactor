
// This file is part of the Coriolis Project.
// Copyright (C) Laboratoire LIP6 - Departement ASIM
// Universite Pierre et Marie Curie
//
// Main contributors :
//        Christophe Alexandre   <Christophe.Alexandre@lip6.fr>
//        Sophie Belloeil             <Sophie.Belloeil@lip6.fr>
//        Hugo Clément                   <Hugo.Clement@lip6.fr>
//        Jean-Paul Chaput           <Jean-Paul.Chaput@lip6.fr>
//        Damien Dupuis                 <Damien.Dupuis@lip6.fr>
//        Christian Masson           <Christian.Masson@lip6.fr>
//        Marek Sroka                     <Marek.Sroka@lip6.fr>
// 
// The Coriolis Project  is free software;  you can  redistribute it and/or
// modify  it  under the  terms  of  the  GNU  General  Public License  as
// published by  the Free  Software Foundation; either  version 2  of  the
// License, or (at your option) any later version.
// 
// The Coriolis Project  is distributed in the hope that it will be useful,
// but  WITHOUT  ANY  WARRANTY;  without  even  the  implied  warranty  of
// MERCHANTABILITY  or  FITNESS  FOR A  PARTICULAR PURPOSE.   See  the GNU
// General Public License for more details.
// 
// You should have received a copy  of  the  GNU  General  Public  License
// along with  the Coriolis Project;  if  not,  write to the  Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
//
// License-Tag
//
// Date   : 29/01/2004
// Author : Christophe Alexandre  <Christophe.Alexandre@lip6.fr>
//
// Authors-Tag 
#ifndef __SURFACE_H
#define __SURFACE_H

#include "Container.h"
#include "Mauka.h"

namespace MAUKA{

class Bin;
class Row;
class SubRow;
class Mauka;
    
class Surface: public Container {
// ****************************
    friend class Mauka;
    friend class SimAnnealingPlacer;
    friend class Row;
    friend class SubRow;
    friend class BBPlacer;

// Types
// *****
    public: typedef Container Inherit;
    public: typedef vector<Row*> RowVector;
    public: typedef list<SubRow*> SubRowList;
    public: typedef map<Unit, unsigned, less<Unit> > RowYMax;
    public: typedef map<Unit, unsigned, greater<Unit> > RowYMinInv;
    //public: typedef map<Unit, Row*> RowMap;
            
// Attributes
// **********
    private: Mauka*             _mauka;
    //private: RowMap             _rowMap;
    private: RowVector          _rowVector;
    private: RowYMax            _rowYMax;
    private: RowYMinInv         _rowYMinInv;
    private: bool               _rowZeroOrientation;
    private: double             _margin;
    private: Unit               _binWidthMax;
    private: Unit               _binWidthMin;
    private: double             _searchRatio;
    private: Unit               _searchWidth;
    private: Unit               _searchHeight;

// Constructors
// ************
    protected: Surface(Mauka* mauka, const Box& placementbox, double searchratio);
    public: static Surface* Create(Mauka* mauka, const Box& placementbox, double searchratio);
               
// Accessors
// *********
    public: virtual Cell* GetCell() const { return _mauka->GetCell(); }
    public: Bin* GetBinInSurface(Bin* srcbin, double dist);
    public: double GetBinCost() const;
    public: double GetRowCost() const;
    public: Unit GetBinsSize() const;
    public: Unit GetBinsCapa() const;
    public: Unit GetSubRowsCapa() const;
    public: double GetMargin() const { return _margin; };
    public: Mauka* GetMauka() { return _mauka; };

// Others
// ******
    public: void DisplayBinHits() const;
    protected: virtual void _PreDelete();
    private: void InsertRow(Row* row);
    private: void RemoveRow(Row* row);
    private: Row* InsertSubRow(SubRow* subrow, bool orientation);
    private: void RemoveSubRow(SubRow* subrow);
    private: void PlotBinsStats(ofstream& out) const;
    private: void Plot(ofstream& out) const;
    public: virtual string _GetTypeName() const {return _TName("Surface");};
    public: virtual Record* _GetRecord() const;
    private: Row* InsertSubRowInRow(SubRow* subrow, bool orientation);
    private: void _ComputeRowsAndSubRows();
    private: void _DisplayInstances(Mauka::UVector& instanceids, SubRowList& subrowlist);
    private: void _ComputeCapacity();
    private: void _PostCreate();
};

}
#endif /* __SURFACE_H */
