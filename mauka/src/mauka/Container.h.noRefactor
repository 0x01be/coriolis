
// This file is part of the Coriolis Project.
// Copyright (C) Laboratoire LIP6 - Departement ASIM
// Universite Pierre et Marie Curie
//
// Main contributors :
//        Christophe Alexandre   <Christophe.Alexandre@lip6.fr>
//        Sophie Belloeil             <Sophie.Belloeil@lip6.fr>
//        Hugo Clément                   <Hugo.Clement@lip6.fr>
//        Jean-Paul Chaput           <Jean-Paul.Chaput@lip6.fr>
//        Damien Dupuis                 <Damien.Dupuis@lip6.fr>
//        Christian Masson           <Christian.Masson@lip6.fr>
//        Marek Sroka                     <Marek.Sroka@lip6.fr>
// 
// The Coriolis Project  is free software;  you can  redistribute it and/or
// modify  it  under the  terms  of  the  GNU  General  Public License  as
// published by  the Free  Software Foundation; either  version 2  of  the
// License, or (at your option) any later version.
// 
// The Coriolis Project  is distributed in the hope that it will be useful,
// but  WITHOUT  ANY  WARRANTY;  without  even  the  implied  warranty  of
// MERCHANTABILITY  or  FITNESS  FOR A  PARTICULAR PURPOSE.   See  the GNU
// General Public License for more details.
// 
// You should have received a copy  of  the  GNU  General  Public  License
// along with  the Coriolis Project;  if  not,  write to the  Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
//
// License-Tag
//
// Date   : 29/01/2004
// Author : Christophe Alexandre  <Christophe.Alexandre@lip6.fr>
//
// Authors-Tag 
#ifndef __CONTAINER_H
#define __CONTAINER_H

#include "Box.h"
#include "UserGo.h"
USING_NAMESPACE_HURRICANE

namespace MAUKA {

class Container: public UserGo {
// ******************************

// Types
// *****
    public: typedef UserGo Inherit;

// Attributes
// **********
    protected: Box _box;

// Constructors
// ************
    protected: Container(const Cell* cell, const Box& box);
// 
// Accessors
// *********

    public: Box GetBoundingBox() const { return _box; };
    public: const Box& GetBox() const { return _box; };
    public: const Unit& GetXMin() const { return _box.GetXMin(); };
    public: const Unit& GetYMin() const { return _box.GetYMin(); };
    public: const Unit& GetXMax() const { return _box.GetXMax(); };
    public: const Unit& GetYMax() const { return _box.GetYMax(); };
    public: Unit GetHeight() const { return _box.GetHeight(); };
    public: Unit GetWidth() const { return _box.GetWidth(); };
    public: Point GetCenter() const { return _box.GetCenter(); }

// Updators
// ********

    public: virtual void Translate(const Unit& dx, const Unit& dy) {}

// Others
// ******
    public: virtual bool _IsInterceptedBy(View* view, const Point& point, const Unit& aperture) const;
    public: virtual void _Draw(View* view, BasicLayer* basiclayer, const Box& updatearea, const Transformation& transformation);
    public: virtual void _Highlight(View* view, const Box& updatearea, const Transformation& transformation);
            
    public: virtual string _GetTypeName() const {return _TName("Container");};
    public: virtual string _GetString() const;
    public: virtual Record* _GetRecord() const;

};

}

#endif // __CONTAINER_H
