
// This file is part of the Coriolis Project.
// Copyright (C) Laboratoire LIP6 - Departement ASIM
// Universite Pierre et Marie Curie
//
// Main contributors :
//        Christophe Alexandre   <Christophe.Alexandre@lip6.fr>
//        Sophie Belloeil             <Sophie.Belloeil@lip6.fr>
//        Hugo Clément                   <Hugo.Clement@lip6.fr>
//        Jean-Paul Chaput           <Jean-Paul.Chaput@lip6.fr>
//        Damien Dupuis                 <Damien.Dupuis@lip6.fr>
//        Christian Masson           <Christian.Masson@lip6.fr>
//        Marek Sroka                     <Marek.Sroka@lip6.fr>
// 
// The Coriolis Project  is free software;  you can  redistribute it and/or
// modify  it  under the  terms  of  the  GNU  General  Public License  as
// published by  the Free  Software Foundation; either  version 2  of  the
// License, or (at your option) any later version.
// 
// The Coriolis Project  is distributed in the hope that it will be useful,
// but  WITHOUT  ANY  WARRANTY;  without  even  the  implied  warranty  of
// MERCHANTABILITY  or  FITNESS  FOR A  PARTICULAR PURPOSE.   See  the GNU
// General Public License for more details.
// 
// You should have received a copy  of  the  GNU  General  Public  License
// along with  the Coriolis Project;  if  not,  write to the  Free Software
// Foundation, inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
//
// License-Tag
//
// Date   : 19/07/2006
// Author : Christophe Alexandre  <Christophe.Alexandre@lip6.fr>
//
// Authors-Tag 

#ifndef __MAUKA_H
#define __MAUKA_H

#include "Instance.h"
USING_NAMESPACE_HURRICANE

#include "ToolEngine.h"
using namespace CRL;

#include "GCell.h"
using namespace NIMBUS;

namespace MAUKA {

class Surface;
class SimAnnealingPlacer;
class BBPlacer;

class Mauka: public ToolEngine 
// ************************
{
    //Mauka: a cool, light, Hawaiian wind descending from the montains. 
    friend class Surface;
    friend class SimAnnealingPlacer;
    friend class Move;
    friend class Bin;
    friend class SubRow;
    friend class BBPlacer;
// Types
// *****
    public: typedef ToolEngine Inherit;
    public: typedef vector<Occurrence> InstanceOccurrencesVector;
    public: typedef map<Occurrence, unsigned> InstanceOccurrencesMap;
    public: typedef vector<unsigned> UVector;
    public: typedef list<unsigned> UList;
    public: typedef vector<UVector> UTable;
    public: typedef vector<bool> BVector;
    public: typedef vector<DbU::Unit> DbU::UnitVector;
    public: typedef vector<Net*> NetVector;
    public: typedef vector<Box> BoxVector;
    public: typedef vector<BoxVector> BBoxes;
    public: typedef vector<vector<double> > Costs; 
    public: typedef vector<bool> PrePlaceRow;
    public: typedef vector<PrePlaceRow> PrePlaceTab;
    public:
            class Parameters
            {
                public: bool standardSimulatedAnnealing;
                public: bool ignorePins;
                public: bool plotBins; //plot bins utilisation
                public: Parameters()
                        : standardSimulatedAnnealing(false)
                        , ignorePins(false)
                        , plotBins(true)
                        {}
            };
    
// Attributes
// **********
    public: Parameters                  _params; 
    private: DisplaySlot*               _displaySlot;
    private: InstanceOccurrencesVector  _instanceOccurrencesVector;
    private: InstanceOccurrencesMap     _instanceOccurrencesMap;
    private: DbU::UnitVector                 _instanceWidths;
    private: UTable                     _instanceNets;
    private: NetVector                  _nets;
    private: UTable                     _netInstances;
    private: UVector                    _netInitX;
    private: UVector                    _netInitY;
    private: BVector                    _hasInitX;
    private: BVector                    _hasInitY;
    private: Surface*                   _surface;
    private: SimAnnealingPlacer*        _simAnnealingPlacer;
    private: BBPlacer*                  _bbPlacer;
             

// Constructor
// ***********
    private: Mauka(Cell* cell);
    public: static Mauka* create(Cell* cell, double searchratio = 0.5, Box placementbox = Box());
            
// Accessors
// *********
    public: virtual const Name& getName() const;
    private: Surface* _getSurface() const { return _surface; }
    public: DbU::Unit getInstanceIdWidth(unsigned id) const { return _instanceWidths[id]; }
    public: unsigned getRandomInstanceId() const;

// Others
// ******
    private: void _postCreate(Box& placementbox, double searchratio);
    private: void _preDestroy();
    //public: void ReInit();
    public: bool Iterate();
    public: void Run();
    public: void Test();
    public: virtual string _getTypeName() const {return _TName("Mauka");};
    public: virtual Record* _getRecord() const;
    public: void Save() const;
    public: void PlotBinsStats() const;
    public: void Plot() const;
    private: Box PlotFixedPointsLabels(ofstream& out) const;
    private: void Construct();
    public: void hide();
    public: void show();

};

void setPlacementStatusRecursivelyToPlaced(Instance* instance);

Mauka* getMauka  (const Cell* cell);
bool TestMaukaConstruction(Cell* cell, GCell* gcell);

}

#endif /* __MAUKA_H */
