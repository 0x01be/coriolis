
// This file is part of the Coriolis Project.
// Copyright (C) Laboratoire LIP6 - Departement ASIM
// Universite Pierre et Marie Curie
//
// Main contributors :
//        Christophe Alexandre   <Christophe.Alexandre@lip6.fr>
//        Sophie Belloeil             <Sophie.Belloeil@lip6.fr>
//        Hugo Clément                   <Hugo.Clement@lip6.fr>
//        Jean-Paul Chaput           <Jean-Paul.Chaput@lip6.fr>
//        Damien Dupuis                 <Damien.Dupuis@lip6.fr>
//        Christian Masson           <Christian.Masson@lip6.fr>
//        Marek Sroka                     <Marek.Sroka@lip6.fr>
// 
// The Coriolis Project  is free software;  you can  redistribute it and/or
// modify  it  under the  terms  of  the  GNU  General  Public License  as
// published by  the Free  Software Foundation; either  version 2  of  the
// License, or (at your option) any later version.
// 
// The Coriolis Project  is distributed in the hope that it will be useful,
// but  WITHOUT  ANY  WARRANTY;  without  even  the  implied  warranty  of
// MERCHANTABILITY  or  FITNESS  FOR A  PARTICULAR PURPOSE.   See  the GNU
// General Public License for more details.
// 
// You should have received a copy  of  the  GNU  General  Public  License
// along with  the Coriolis Project;  if  not,  write to the  Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
//
// License-Tag
//
// Date   : 29/01/2004
// Author : Christophe Alexandre  <Christophe.Alexandre@lip6.fr>
//
// Authors-Tag 
#include "SubRow.h"
#include "Bin.h"
#include "Surface.h"
#include "SimAnnealingPlacer.h"

namespace MAUKA {
    
Bin::Bin(const Cell* cell, SubRow* subrow, const Box& box)
    : Inherit(cell, box)
    , _subRow(subrow)
    , _mauka(NULL)
    , _instanceOccurrenceIds()
    , _size(0)
    , _capa(0)
    , _sourceHits(0)
    , _targetHits(0)
{}

Bin* Bin::Create(const Cell* cell, SubRow* subrow, const Box& box)
{
    Bin* bin = new Bin(cell, subrow, box);
    bin->_PostCreate();
    return bin;
}

void Bin::_PostCreate()
{
    if (!_subRow)
        throw Error("Empty SubRow for Bin"); 
    _mauka = _subRow->GetSurface()->GetMauka();
    if (!_mauka)
        throw Error("Empty SimAnnealingPlacer for Bin"); 
    _capa = GetUnit(GetValue(GetWidth()) * (1.0 - _subRow->GetSurface()->GetMargin()));
    Inherit::_PostCreate();
}

void Bin::_ComputeCapacity(double margin)
{
    _capa = GetUnit(GetValue(GetWidth()) * (1.0 - margin));
}

Cell* Bin::GetCell() const
{
    return _subRow->GetCell();
}

void Bin::AddInstance(unsigned instanceid)
{
    _instanceOccurrenceIds.push_back(instanceid);
    Unit insWidth = _mauka->_instanceWidths[instanceid];
    _AddSize(insWidth);
    _mauka->_simAnnealingPlacer->_instanceBins[instanceid] = this;
}

void Bin::_AddSize(Unit value)
{
    _size += value;
    _subRow->_AddSize(value);
}

void Bin::RemoveInstance(unsigned instanceid)
{
    _instanceOccurrenceIds.remove(instanceid);
    Unit insWidth = _mauka->_instanceWidths[instanceid];
    _AddSize(-insWidth);
    _mauka->_simAnnealingPlacer->_instanceBins[instanceid] = NULL;
}

void Bin::RemoveBackInstance(unsigned instanceid)
{
    assert(_instanceOccurrenceIds.back() == instanceid);
    _instanceOccurrenceIds.pop_back();
    Unit insWidth = _mauka->_instanceWidths[instanceid];
    _AddSize(-insWidth);
    _mauka->_simAnnealingPlacer->_instanceBins[instanceid] = NULL;
}

void Bin::RemoveFrontInstance(unsigned instanceid)
{
    assert(_instanceOccurrenceIds.front() == instanceid);
    _instanceOccurrenceIds.pop_front();
    Unit insWidth = _mauka->_instanceWidths[instanceid];
    _AddSize(-insWidth);
    _mauka->_simAnnealingPlacer->_instanceBins[instanceid] = NULL;
}

bool Bin::TryAddInstance(unsigned instanceid)
{
    Unit insWidth = _mauka->_instanceWidths[instanceid];
    if (GetCapaVsSize() < insWidth)
        return false;
    AddInstance(instanceid);
    return true;
}

bool Bin::UnderOccupied() const
{
    // On Considère pour l'instant qu'un Bin est sous-occupé
    // et donc qu'il est intéressant d'y déplacer une instance
    // si il a 20% de vide par rapport à son remplissage idéal

    return ((_instanceOccurrenceIds.size() == 0)
        || (_size <= (1.0 - _subRow->GetSurface()->GetMargin() - 0.2) * _capa));
}

double Bin::GetCost() const
{
    return abs(GetValue(_size - _capa));
}

void Bin::DisplayHits() const
{
    cout << this << " nb source hits: " << _sourceHits << endl;
    cout << this << " nb target hits: " << _targetHits << endl;
}

void Bin::IncrementSourceHits()
{
	 ++_sourceHits;
}

void Bin::IncrementTargetHits()
{
	 ++_targetHits;
}

void Bin::PlotStats(ofstream& out) const
{
    unsigned x = (unsigned)(GetValue(GetXMin())) + (unsigned)(GetValue(GetXMax() - GetXMin())) / 2;
    //unsigned decal = (unsigned)(GetValue(GetYMax() - GetYMin())) / 4;
    //unsigned y = (unsigned)(GetValue(GetYMin()));
    unsigned y = (unsigned)(GetValue(GetYMin())) + (unsigned)(GetValue(GetYMax() - GetYMin())) / 2;
    unsigned totalMoves = _mauka->_simAnnealingPlacer->GetMoves();
    if (totalMoves)
    {
        //double sourcePercent = (_sourceHits * 100.0) / totalMoves;
        double targetPercent = (_targetHits * 100.0) / totalMoves;
        out << "set label \""  
            << targetPercent << "%\" at " << x << "," << y << " center"
            << endl;
        //out << "set label \""  
        //    << targetPercent << "%\" at " << x << "," << y + decal << " center"
        //    << endl;
    }
}

void Bin::Plot(ofstream& out) const
{
    out << GetValue(GetXMin()) + 0.3 << " " << GetValue(GetYMin()) + 0.3 << endl
        << GetValue(GetXMin()) + 0.3 << " " << GetValue(GetYMax()) - 0.3 << endl
        << GetValue(GetXMax()) - 0.3 << " " << GetValue(GetYMax()) - 0.3 << endl
        << GetValue(GetXMax()) - 0.3 << " " << GetValue(GetYMin()) + 0.3 << endl
        << GetValue(GetXMin()) + 0.3 << " " << GetValue(GetYMin()) + 0.3 << endl << endl;
}

}
