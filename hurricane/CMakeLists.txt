PROJECT(HURRICANE)

CMAKE_MINIMUM_REQUIRED(VERSION 2.4.0)

SET(CMAKE_MODULE_PATH "${HURRICANE_SOURCE_DIR}/cmake_modules/")

SET(CMAKE_C_FLAGS_DEBUG             "-pg -g -Wall" CACHE STRING "Debug options." FORCE)
SET(CMAKE_CXX_FLAGS_DEBUG           "-pg -g -Wall" CACHE STRING "Debug options." FORCE)
SET(CMAKE_LINKER_FLAGS_DEBUG        "-pg"          CACHE STRING "Debug options." FORCE)
SET(CMAKE_SHARED_LINKER_FLAGS_DEBUG "-pg"          CACHE STRING "Debug options." FORCE)
SET(CMAKE_MODULE_LINKER_FLAGS_DEBUG "-pg"          CACHE STRING "Debug options." FORCE)
SET(CMAKE_EXE_LINKER_FLAGS_DEBUG    "-pg"          CACHE STRING "Debug options." FORCE)

OPTION(BUILD_STATIC "Build static version of libraries & binaries" OFF)

IF(BUILD_STATIC)
  MESSAGE(STATUS "Building static libraries.")
# check for qmake
  FIND_PROGRAM(QT_QMAKE_EXECUTABLE NAMES qmake-qt4 qmake PATHS
    /opt/qt4-static-4.3.2/bin
    NO_DEFAULT_PATH
    )
  MESSAGE(STATUS "qmake: ${QT_QMAKE_EXECUTABLE}")
ELSE(BUILD_STATIC)
  MESSAGE(STATUS "Building dynamic libraries.")
ENDIF(BUILD_STATIC)

SET(QT_USE_QTXML "true")

FIND_PACKAGE(Qt4 REQUIRED) # find and setup Qt4 for this project
FIND_PACKAGE(BISON REQUIRED)
FIND_PACKAGE(FLEX REQUIRED)
FIND_PACKAGE(PythonLibs REQUIRED)
FIND_PACKAGE(PythonInterp REQUIRED)
FIND_PACKAGE(Doxygen)

ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(cmake_modules)
IF(DOXYGEN_FOUND)
  ADD_SUBDIRECTORY(doc)
ENDIF(DOXYGEN_FOUND)
